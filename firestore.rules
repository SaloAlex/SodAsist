rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.rol == 'admin';
    }

    // Reglas para usuarios
    match /users/{userId} {
      // Permitir lectura si est√° autenticado
      allow read: if isAuthenticated();
      
      // Permitir crear su propio documento de usuario al registrarse
      allow create: if isAuthenticated() && 
                   request.auth.uid == userId &&
                   request.resource.data.rol in ['admin', 'sodero'];
      
      // Solo admin puede actualizar roles
      allow update: if isAuthenticated() && 
                   request.auth.uid == userId || isAdmin();
    }

    // Reglas para clientes
    match /clientes/{clienteId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Reglas para entregas
    match /entregas/{entregaId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Pagos - authenticated users can read and write
    match /pagos/{pagoId} {
      allow read, write: if request.auth != null;
    }
    
    // Inventario - authenticated users can read and write
    match /inventarioVehiculo/{inventarioId} {
      allow read, write: if request.auth != null;
    }
    
    // KPIs - authenticated users can read, only functions can write
    match /kpis/{kpiId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserRole(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null ? userDoc.data.rol : null;
    }

    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }

    function isManager(userId) {
      return getUserRole(userId) == 'manager';
    }

    function isSodero(userId) {
      return getUserRole(userId) == 'sodero';
    }

    function isAdminOrManager(userId) {
      let role = getUserRole(userId);
      return role == 'admin' || role == 'manager';
    }

    function isAdminOrSodero(userId) {
      let role = getUserRole(userId);
      return role == 'admin' || role == 'sodero';
    }

    // Función para verificar límite de usuarios por plan
    function canCreateUser(tenantId) {
      let tenant = get(/databases/$(database)/documents/tenants/$(tenantId));
      if (tenant == null) return false;
      
      let tenantData = tenant.data;
      let currentUserCount = get(/databases/$(database)/documents/users).where('tenantId', '==', tenantId).size();
      
      if (tenantData.plan == 'individual') return currentUserCount < 1;
      if (tenantData.plan == 'business') return currentUserCount < 11;
      if (tenantData.plan == 'enterprise') return true; // Sin límite
      
      return false;
    }

    // Reglas para usuarios
    match /users/{userId} {
      allow create: if isAuthenticated() && 
        (request.auth.uid == userId || // Usuario creando su propio documento
         (request.resource.data.tenantId != null && canCreateUser(request.resource.data.tenantId))); // Admin creando empleado
      allow read, update, delete: if isAuthenticated() && 
        (isOwner(userId) || // Usuario puede ver/editar sus propios datos
         isAdmin(request.auth.uid)); // Admin puede ver/editar todos los usuarios del tenant
    }

    // Reglas para tenants
    match /tenants/{tenantId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.adminUid || // Owner del tenant
         isAdmin(request.auth.uid)); // Admin del sistema
    }

    // Reglas para datos de tenant
    match /tenants/{tenantId}/{collection}/{document=**} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.tenantId || // Usuario del tenant
         isAdmin(request.auth.uid)); // Admin del sistema
    }

    // Reglas para colecciones globales (compatibilidad)
    match /{collection}/{document=**} {
      allow read, write: if isAuthenticated() && 
        (collection == 'users' || // Usuarios (manejado arriba)
         collection == 'tenants'); // Tenants (manejado arriba)
    }
  }
}